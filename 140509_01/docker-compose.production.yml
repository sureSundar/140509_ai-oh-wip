 

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: retailai_postgres
    env_file:
      - .env.production
    environment:
      POSTGRES_DB: retailai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/infrastructure/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "55432:5432"  # host:container (avoid host 5432 conflict)
    networks:
      - retailai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: retailai_redis
    env_file:
      - .env.production
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    ports:
      - "16379:6379"  # host:container (avoid host 6379 conflict)
    networks:
      - retailai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Core ML Engine
  ml-engine:
    build:
      context: ./src/services/ml-engine
      dockerfile: ./Dockerfile.production
    container_name: retailai_ml_engine
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/retailai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8001:8001"
    networks:
      - retailai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models

  # Authentication Service
  auth-service:
    build:
      context: ./src/services/auth
      dockerfile: ./Dockerfile.production
    container_name: retailai_auth
    env_file:
      - .env.production
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/1
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - BCRYPT_ROUNDS=12
    ports:
      - "8004:8004"
    networks:
      - retailai_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # External Data Service
  external-data:
    build:
      context: ./src/services/external-data
      dockerfile: ./Dockerfile.production
    container_name: retailai_external_data
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/retailai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/2
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8002:8002"
    networks:
      - retailai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Alert Engine
  alert-engine:
    build:
      context: ./src/services/alert-engine
      dockerfile: ./Dockerfile.production
    container_name: retailai_alerts
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/retailai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/3
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8003:8003"
    networks:
      - retailai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Dashboard Service
  dashboard:
    build:
      context: ./src/services/dashboard
      dockerfile: ./Dockerfile.production
    container_name: retailai_dashboard
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/retailai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/4
      - AUTH_SERVICE_URL=http://auth-service:8004
      - ML_SERVICE_URL=http://ml-engine:8001
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8005:8005"
    networks:
      - retailai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      ml-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Reporting Service
  reporting:
    build:
      context: ./src/services/reporting
      dockerfile: ./Dockerfile.production
    container_name: retailai_reporting
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/retailai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/5
      - AUTH_SERVICE_URL=http://auth-service:8004
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8006:8006"
    networks:
      - retailai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Performance Monitoring
  monitoring:
    build:
      context: ./src/services/monitoring
      dockerfile: ./Dockerfile.production
    container_name: retailai_monitoring
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/retailai
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379/6
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - GRAFANA_ENABLED=true
    ports:
      - "8007:8007"
      - "9090:9090"  # Prometheus
      - "3333:3000"  # Grafana
    networks:
      - retailai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - prometheus_data:/prometheus
      - grafana_data:/var/lib/grafana

  # Frontend Application
  frontend:
    build:
      context: ./src/frontend/executive-dashboard
      dockerfile: ./Dockerfile.production
    container_name: retailai_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_AUTH_URL=http://localhost:8004
      - REACT_APP_DASHBOARD_URL=http://localhost:8005
      - NODE_ENV=production
    ports:
      - "3334:80"
    networks:
      - retailai_network
    depends_on:
      - auth-service
      - ml-engine
      - dashboard
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # API Gateway / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: retailai_nginx_14050901
    ports:
      - "18080:80"
      - "18443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./:/usr/share/nginx/html:ro
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - retailai_network
    depends_on:
      - frontend
      - auth-service
      - ml-engine
      - dashboard
      - alert-engine
      - external-data
      - reporting
      - monitoring
    restart: unless-stopped

networks:
  retailai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
